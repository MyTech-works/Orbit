@model SK_CRM.Models.EmployeeMenu

@{
    ViewBag.Title = "Create";
    Layout = "~/Views/Shared/Layout/_LayoutAdminPanel.cshtml";
}

<div class="content-wrapper container-xxl p-0">
    <div class="content-header row">
    </div>
    <div class="content-body">
        <!-- Horizontal Wizard -->
        <section class="horizontal-wizard">
            <div class="bs-stepper horizontal-wizard-example">
                <div class="bs-stepper-header" role="tablist">
                    <div class="step active" data-target="#account-details" role="tab" id="account-details-trigger">
                        <button type="button" class="step-trigger">
                            <span class="bs-stepper-box">1</span>
                            <span class="bs-stepper-label">
                                <span class="bs-stepper-title">Role Details</span>
                                <span class="bs-stepper-subtitle">Setup Role Details</span>
                            </span>
                        </button>
                    </div>
                    <div class="line">
                        <i data-feather="chevron-right" class="font-medium-2"></i>
                    </div>


                </div>
                <div class="bs-stepper-content">

                    <div id="account-details" class="content active dstepper-block" role="tabpanel" aria-labelledby="account-details-trigger">
                        <div class="content-header">
                            <h5 class="mb-0">Employee Menu Details</h5>
                            <small class="text-muted">Enter New Employee Menu Details.</small>
                        </div>
                        @using (Html.BeginForm("Create", "EmployeeMenus", FormMethod.Post, new { @class = "form-horizontal", role = "form" }))
                        {
                            @Html.AntiForgeryToken()
                            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                            @Html.HiddenFor(model => model.MenuId)
                            <div class="row">
                                <div class="mb-1 col-md-6">
                                    @Html.LabelFor(model => model.MenuName, htmlAttributes: new { @class = "form-label" })
                                    @Html.EditorFor(model => model.MenuName, new { htmlAttributes = new { @class = "form-control", @placeholder = "Enter Role Name" } })
                                    @Html.ValidationMessageFor(model => model.MenuName, "", new { @class = "text-danger" })
                                </div>

                                <div class="mb-1 col-md-6">
                                    @Html.LabelFor(model => model.MainMenuId, htmlAttributes: new { @class = "form-label" })
                                    @Html.DropDownListFor(m => m.MainMenuId,
                                             new SelectList(ViewBag.MainMenus, "MenuId", "MenuName"), "Select MainMenu", new { @class = "form-control input-height" })
                                    @Html.ValidationMessageFor(model => model.MainMenuId, "", new { @class = "text-danger" })
                                </div>

                                <div class="mb-1 col-md-6">
                                    @Html.LabelFor(model => model.URLPath, htmlAttributes: new { @class = "form-label" })
                                    @Html.EditorFor(model => model.URLPath, new { htmlAttributes = new { @class = "form-control", @placeholder = "Enter Role Name" } })
                                    @Html.ValidationMessageFor(model => model.URLPath, "", new { @class = "text-danger" })
                                </div>
                                <div class="mb-1 col-md-6">
                                    @Html.LabelFor(model => model.OrderBy, htmlAttributes: new { @class = "form-label" })
                                    @Html.EditorFor(model => model.OrderBy, new { htmlAttributes = new { @class = "form-control", @placeholder = "Enter Role Name" } })
                                    @Html.ValidationMessageFor(model => model.OrderBy, "", new { @class = "text-danger" })
                                </div>

                                <div class="mb-1 col-md-6">
                                    @Html.LabelFor(model => model.IsNotActive, htmlAttributes: new { @class = "form-label" })
                                    @Html.EditorFor(model => model.IsNotActive)
                                    @Html.ValidationMessageFor(model => model.IsNotActive, "", new { @class = "text-danger" })
                                </div>


                                <div class="form-group">
                                    @Html.LabelFor(model => model.FontIcon, htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-10">
                                        @Html.EditorFor(model => model.FontIcon, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.FontIcon, "", new { @class = "text-danger" })
                                    </div>
                                </div>


                            </div>
                            <div class="d-flex justify-content-between">

                                <button class="btn btn-success" type="submit" id="btnCompanySave"><i class="fa fa-spinner fa-spin hide-spinner"></i>Submit</button>
                            </div>
                        }

                    </div>



                    @*}*@
                </div>

            </div>
        </section>
        <!-- /Horizontal Wizard -->
    </div>

</div>

